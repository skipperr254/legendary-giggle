import React from 'react';
import { getStylePDF } from '@/lib/supabase-storage';

interface DownloadGeneratorProps {
  style: string;
  description: string;
  characteristics: string[];
  designTips: string[];
  metals: string[];
  woodFinishes: string[];
  colorPalette: string[];
}

const DownloadGenerator: React.FC<DownloadGeneratorProps> = ({
  style,
  description,
  characteristics,
  designTips,
  metals,
  woodFinishes,
  colorPalette
}) => {
  const generatePDF = () => {
    // First try to get the actual PDF from Supabase
    getStylePDF(style).then(pdfUrl => {
      if (pdfUrl) {
        // If PDF exists in Supabase, download it directly
        const element = document.createElement('a');
        element.href = pdfUrl;
        element.download = `${style.replace(/\s+/g, '_')}_Style_Guide.pdf`;
        element.target = '_blank';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
      } else {
        // Fallback to generating text file
        generateTextFile();
      }
    }).catch(() => {
      // If there's an error, fallback to text file
      generateTextFile();
    });
  };

  const generateTextFile = () => {
    const content = `
# ${style} Style Guide

## Description
${description}

## Key Characteristics
${characteristics.map(char => `• ${char}`).join('\n')}

## Design Tips
${designTips.map(tip => `• ${tip}`).join('\n')}

## Recommended Materials

### Metals
${metals.map(metal => `• ${metal}`).join('\n')}

### Wood Finishes
${woodFinishes.map(wood => `• ${wood}`).join('\n')}

## Color Palette
${colorPalette.map(color => `• ${color}`).join('\n')}

---
Generated by Style and Design Guide
${new Date().toLocaleDateString()}
    `;

    const element = document.createElement('a');
    const file = new Blob([content], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${style.replace(/\s+/g, '_')}_Style_Guide.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  React.useEffect(() => {
    generatePDF();
  }, []);

  return null;
};

export default DownloadGenerator;